/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   actions.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: math <math@student.42.fr>                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/08/30 17:45:26 by math42            #+#    #+#             */
/*   Updated: 2024/03/06 23:45:27 by math             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../philosopher.h"

int	think(t_philo *ph)
{
	ph->last_act = THINK;
	printf("%ld\t\t%d is thinking\n", get_print_time(ph), ph->name);
	return (0);
}

static int	lock_fork(t_philo *ph)
{
	long int	last_meal;

	last_meal = get_last_meal(ph);
	pthread_mutex_lock(ph->fork[0]);
	if ((get_time() - last_meal) >= ph->time_to_die || get_status(ph) <= 0)
	{
		pthread_mutex_unlock(ph->fork[0]);
		return (1);
	}
	printf("%ld\t\t%d has taken a fork\n", get_print_time(ph), ph->name);
	pthread_mutex_lock(ph->fork[1]);
	if ((get_time() - last_meal) >= ph->time_to_die || get_status(ph) <= 0)
	{
		pthread_mutex_unlock(ph->fork[0]);
		pthread_mutex_unlock(ph->fork[1]);
		return (1);
	}
	printf("%ld\t\t%d has taken a fork\n", get_print_time(ph), ph->name);
	return (0);
}

int	eat(t_philo *ph)
{
	ph->last_act = EAT;
	if (lock_fork(ph))
		return (-1);
	printf("%ld\t\t%d is eating\n", get_print_time(ph), ph->name);
	set_last_meal(ph, get_time() + ph->time_to_eat);
	sleep_ms(ph->time_to_eat);
	pthread_mutex_unlock(ph->fork[1]);
	pthread_mutex_unlock(ph->fork[0]);
	if (get_status(ph) > 0)
	{
		printf("%ld\t\t%d has droped a fork\n", get_print_time(ph), ph->name);
		printf("%ld\t\t%d has droped a fork\n", get_print_time(ph), ph->name);
	}
	if (ph->notepme-- == 0)
	{
		printf("%ld\t\t%d finish eating\n", get_print_time(ph), ph->name);
		add_status(ph, -1);
		return (1);
	}
	return (0);
}

int	philo_sleep(t_philo	*ph)
{
	ph->last_act = SLEEP;
	printf("%ld\t\t%d is sleeping\n", get_print_time(ph), ph->name);
	sleep_ms(ph->time_to_sleep);
	return (0);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: math <math@student.42.fr>                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/08/30 15:08:00 by math42            #+#    #+#             */
/*   Updated: 2024/03/06 22:34:46 by math             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../philosopher.h"

static void	philo_init(t_philo *self, t_philo_init philo)
{
	self->time_zero = philo.time_zero;
	self->time_to_die = philo.time_to_die;
	self->time_to_eat = philo.time_to_eat;
	self->time_to_sleep = philo.time_to_sleep;
	self->notepme = philo.notepme;
	self->mutex_lstmeal = philo.mutex_lstmeal;
	self->mutex_status = philo.mutex_status;
	self->fork[0] = NULL;
	self->fork[1] = NULL;
	self->status = philo.status;
	self->last_act = SLEEP;
	self->phid = philo.phid;
	self->name = philo.phid + 1;
	self->last_meal = philo.time_zero;
}

static void	set_forks(t_data *dt)
{
	int	i;

	i = -1;
	while (++i < dt->n_philo)
	{
		if (pthread_mutex_init(&dt->fork[i], NULL))
			printf("fork %d fail at %p\n", i, &dt->fork[i]);
	}
	i = -1;
	while (++ i < dt->n_philo)
	{
		if (i % 2 == 0)
		{
			dt->philo[i].fork[0] = &dt->fork[((i + dt->n_philo) % dt->n_philo)];
			dt->philo[i].fork[1] = &dt->fork[((i + dt->n_philo + 1) % dt->n_philo)];
		}
		else
		{
			dt->philo[i].fork[1] = &dt->fork[((i + dt->n_philo) % dt->n_philo)];
			dt->philo[i].fork[0] = &dt->fork[((i + dt->n_philo + 1) % dt->n_philo)];
		}
	}
}

static int	init_data(t_data *dt, int n_philo, int time_to_die)
{
	dt->n_philo = n_philo;
	dt->time_to_die = time_to_die;
	dt->fork = (pthread_mutex_t *)malloc(dt->n_philo * sizeof(pthread_mutex_t));
	pthread_mutex_init(&dt->mutex_lstmeal, NULL);
	pthread_mutex_init(&dt->mutex_status, NULL);
	dt->routine = (pthread_t *)malloc(dt->n_philo * sizeof(pthread_t));
	dt->philo = (t_philo *)malloc(dt->n_philo * sizeof(t_philo));
	dt->status = dt->n_philo;
	if (!(dt->fork && dt->routine && dt->philo))
	{
		printf("Philosopher: memory allocation error!\n");
		return(1);
	}
	dt->time_zero = get_time();
	return (0);
}

int	init(int argc, char **argv, t_data *dt)
{
	int	i;
	int	j;
	int	black_hole;

	if (init_data(dt, atoi(argv[1]), atoi(argv[2])))
		return (free(dt), 1);
	i = -1;
	j = -1;
	while (++i < dt->n_philo)
	{
		black_hole = -1;
		if (argc >= 6)
		{
			black_hole = atoi(&argv[5][++j]);
			j += ft_strlen(&argv[5][j]);
		}
		philo_init(&dt->philo[i], (t_philo_init){i,
			dt->time_zero, dt->time_to_die, atoi(argv[3]), atoi(argv[4]),
			black_hole, &dt->status, &dt->mutex_lstmeal, &dt->mutex_status});
	}
	set_forks(dt);
	return (0);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: math <math@student.42.fr>                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/08/30 15:08:00 by math42            #+#    #+#             */
/*   Updated: 2024/03/06 22:20:48 by math             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../philosopher.h"

static void	free_data(t_data *dt)
{
	int	i;

	if (dt->fork)
	{
		i = -1;
		while (++i < dt->n_philo)
			pthread_mutex_destroy(&dt->fork[i]);
		free(dt->fork);
		dt->fork = NULL;
	}
	if (dt->routine)
	{
		free(dt->routine);
		dt->routine = NULL;
	}
	if (dt->philo)
	{
		free(dt->philo);
		dt->philo = NULL;
	}
}

static void	is_there_any_dead(t_data *dt)
{
	int	i;
	long int	last;

	while (1)
	{
		i = -1;
		while (++i < dt->n_philo)
		{
			last = get_last_meal(&dt->philo[i]);
			if (get_time() - last >= dt->time_to_die)
			{
				printf("%ld\t%d is DEAD\n", get_time() - dt->time_zero, i + 1);
				set_status(&dt->philo[i], -1);
				return ;
			}
			if (get_status(&dt->philo[i]) <= 0)
				return ;
		}
		usleep(25 * dt->n_philo);
	}
}

void	print_data(t_data dt)
{
	int	i;
	int	fd;

	#include <fcntl.h>
	// fd = open("data", O_CREAT);
	fd = 1;
	dprintf(fd, "\n### data ###\n");
	i = -1;
	dprintf(fd, "time_zero:\t%ld\n", dt.time_zero);
	dprintf(fd, "time_to_die:\t%d\n", dt.time_to_die);
	dprintf(fd, "philo:\t%d\n", dt.n_philo);
	while (++i < dt.n_philo)
	{
		dprintf(fd, "\t\t%p\n", &dt.philo[i]);
	}
	i = -1;
	dprintf(fd, "routine:\n");
	while (++i < dt.n_philo)
	{
		dprintf(fd, "\t\t%p\n", &dt.routine[i]);
	}
	i = -1;
	dprintf(fd, "fork:\n");
	while (++i < dt.n_philo)
	{
		dprintf(fd, "\t\t%p\n", &dt.fork[i]);
	}
	dprintf(fd, "mutex\t\t%p\n", &dt.mutex_lstmeal);
	dprintf(fd, "mutex\t\t%p\n", &dt.mutex_status);
	i = -1;
	while (++i < dt.n_philo)
	{
		dprintf(fd, "\n### %d ###\n", i);
		dprintf(fd, "born time\t%ld\n", dt.philo[i].time_zero);
		dprintf(fd, "time to die\t%ld\n", dt.philo[i].time_to_die);
		dprintf(fd, "time to sleep\t%ld\n", dt.philo[i].time_to_sleep);
		dprintf(fd, "time to eat\t%ld\n", dt.philo[i].time_to_eat);
		dprintf(fd, "notepme\t\t%d\n", dt.philo[i].notepme);
		dprintf(fd, "mutex\t\t%p\n", dt.philo[i].mutex_lstmeal);
		dprintf(fd, "mutex\t\t%p\n", dt.philo[i].mutex_status);
		dprintf(fd, "fork[0]\t\t%p\n", dt.philo[i].fork[0]);
		dprintf(fd, "fork[1]\t\t%p\n", dt.philo[i].fork[1]);
			// Corrected typo from forl[1] to fork[1]
		dprintf(fd, "last act\t%d\n", dt.philo[i].last_act);
		dprintf(fd, "phid\t\t%d\n", dt.philo[i].phid);
		dprintf(fd, "name\t\t%d\n", dt.philo[i].name);
		dprintf(fd, "last meal\t%ld\n", dt.philo[i].last_meal);
	}
	close(fd);
}

int	main(int argc, char **argv)
{
	t_data	dt;
	int		i;
	
	if (check_entry(argc, argv))
		return (1);
	if (init(argc, argv, &dt))
		return (free_data(&dt), 1);
	i = -1;
	while (++i < dt.n_philo)
	{
		if (pthread_create(&dt.routine[i], NULL, philo_loop, &dt.philo[i]) != 0)
			perror("pthread_create");
	}
	is_there_any_dead(&dt);
	i = -1;
	while (++i < dt.n_philo)
		pthread_join(dt.routine[i], NULL);
	free_data(&dt);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   mutex_getset.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mamagalh@student.42madrid.com <mamagalh    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/03/06 10:54:59 by math              #+#    #+#             */
/*   Updated: 2024/03/06 17:48:27 by mamagalh@st      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../philosopher.h"

long int	get_last_meal(t_philo *self)
{
	long int	ret_val;

	pthread_mutex_lock(self->mutex_lstmeal);
	ret_val = self->last_meal;
	pthread_mutex_unlock(self->mutex_lstmeal);
	return (ret_val);
}

void	set_last_meal(t_philo *self, long int val)
{
	pthread_mutex_lock(self->mutex_lstmeal);
	self->last_meal = val;
	pthread_mutex_unlock(self->mutex_lstmeal);
}

int	get_status(t_philo *self)
{
	int	ret_val;

	pthread_mutex_lock(self->mutex_status);
	ret_val = *self->status;
	pthread_mutex_unlock(self->mutex_status);
	return (ret_val);
}

void	set_status(t_philo *self, int val)
{
	pthread_mutex_lock(self->mutex_status);
	*self->status = val;
	pthread_mutex_unlock(self->mutex_status);
}

void	add_status(t_philo *self, int val)
{
	pthread_mutex_lock(self->mutex_status);
	*self->status += val;
	pthread_mutex_unlock(self->mutex_status);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parsing.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: math <math@student.42.fr>                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/02/27 13:54:18 by math              #+#    #+#             */
/*   Updated: 2024/03/06 22:34:09 by math             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../philosopher.h"

int check_entry(int argc, char **argv)
{
    int i;
    int size;
    int count;

    if (argc < 5 || argc > 6)
		  return (printf("Philosopher: few args\n"), 1);
    i = 0;
    while (++i < argc)
    {
        if (!is_alldigit(argv[i]))
            return (printf("Philosopher: forbiden character\n"), 1);
    }
    if (argc == 6)
    {
        i = -1;
        count = 0;
        size = ft_strlen(argv[5]);
        while (++i < size)
        {
            while (argv[5][i] == ' ')
                ++i;
            if (ft_isdigit(argv[5][i]))
                count++;
            while (ft_isdigit(argv[5][i]))
                ++i;
            argv[5][i] = '\0';
        }
        if (count != ft_atoi(argv[1]))
            return (printf("Philosopher: wrong notepme: %d philos %d args\n", ft_atoi(argv[1]), count), 1);
    } 
    return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: mamagalh@student.42madrid.com <mamagalh    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/08/30 17:42:37 by math42            #+#    #+#             */
/*   Updated: 2024/03/06 16:13:48 by mamagalh@st      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../philosopher.h"

long int get_print_time(t_philo *self)
{
	return (get_time() - self->time_zero);
}

void	*philo_loop(void *philo)
{
	t_philo	*ph;

	ph = ((t_philo *)philo);
	while (get_status(ph) > 0)
	{
		if (ph->last_act == SLEEP)
			think(ph);
		else if (ph->last_act == THINK)
		{
			if (eat(ph) != 0)
				return (set_status(ph, -1), NULL);
		}
		else if (ph->last_act == EAT)
			philo_sleep(ph);
	}
	return (set_status(ph, -1), NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   utils.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: math <math@student.42.fr>                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/08/31 16:12:41 by math42            #+#    #+#             */
/*   Updated: 2024/03/06 19:19:45 by math             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "../philosopher.h"

int	sleep_ms(int mseconds)
{
	struct timeval	tv;
	long int		start_time;
	long int		delta_time;

	mseconds *= 1000;
	gettimeofday(&tv, NULL);
	start_time = tv.tv_sec * 1000 + tv.tv_usec / 1000;
	delta_time = ((tv.tv_sec * 1000 + tv.tv_usec / 1000) - start_time);
	while (delta_time < mseconds)
	{
		if ((mseconds - delta_time) / 999999 > 0)
			usleep(999999);
		else
			return (usleep((mseconds - delta_time) % 999999));
		gettimeofday(&tv, NULL);
		delta_time = ((tv.tv_sec * 1000 + tv.tv_usec / 1000) - start_time);
	}
	return (0);
}

long int	get_time(void)
{
	struct timeval	tv;

	gettimeofday(&tv, NULL);
	return (tv.tv_sec * 1000 + tv.tv_usec / 1000);
}

int	ft_strlen(const char *s)
{
	int	i;

	i = 0;
	while (s[i])
	{
		i++;
	}
	return (i);
}

int	ft_isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	return (0);
}

int is_alldigit(char *str)
{
	int	i;

	i = -1;
	while (++i < ft_strlen(str))
	{
		if (!(ft_isdigit(str[i]) || str[i] == ' '))
			return (0);
	}
	return (1);
}

int	ft_atoi(const char *str)
{
	int	num;
	int	sign;
	int	index;

	index = 0;
	sign = 1;
	num = 0;
	while (((str[index] >= 9 && str[index] <= 13)
			|| str[index] == 32)
		&& str[index])
		index++;
	if (str[index] == '+')
		index++;
	else if (str[index] == '-')
	{
		sign *= -1;
		index++;
	}
	while (ft_isdigit(str[index]))
	{
		num *= 10;
		num += (str[index] - '0');
		index++;
	}
	return (num * sign);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philosopher.h                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: math <math@student.42.fr>                  +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/07/04 02:00:26 by mamagalh@st       #+#    #+#             */
/*   Updated: 2024/03/06 19:20:04 by math             ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef PHILOSOPHER_H
# define PHILOSOPHER_H

#include <string.h>
#include <stdio.h>
#include <unistd.h>
#include <pthread.h>
#include <stdlib.h> //atoi
#include <sys/time.h>
#include <signal.h>

// #define	T_LOCK 50;
// #define T_UNLOCK 10;

enum	e_action
{
	THINK = 42,
	EAT = 21,
	SLEEP = 84,
};

enum	e_status
{
	DEAD = -42,
	FINISH = 420,
};

typedef struct s_philo_init
{
	int				phid;
	long int		time_zero;
	long int		time_to_die;
	long int		time_to_eat;
	long int		time_to_sleep;
	int				notepme;
	int				*status;
	pthread_mutex_t	*mutex_lstmeal;
	pthread_mutex_t	*mutex_status;
}					t_philo_init;

typedef struct s_philo
{
	pthread_mutex_t	*fork[2];
	pthread_mutex_t	*mutex_lstmeal;
	pthread_mutex_t	*mutex_status;
	long int		time_zero;
	long int		time_to_die;
	long int		time_to_eat;
	long int		time_to_sleep;
	long int		last_meal;
	int				notepme;
	int				last_act;
	int				phid;
	int				name;
	int				*status;
}	t_philo;

typedef struct s_data
{
	pthread_mutex_t	*fork;
	pthread_mutex_t	mutex_lstmeal;
	pthread_mutex_t	mutex_status;
	pthread_t		*routine;
	t_philo			*philo;
	long int		time_zero;
	int				n_philo;
	int				time_to_die;
	int				status;
}					t_data;

//INIT
int	init(int argc, char **argv, t_data *dt);
//PARSING
int			check_entry(int argc, char **argv);
//PHILO
long int	get_print_time(t_philo *self);
void		*philo_loop(void *philo);
//MUTEX_GETSET
long int	get_last_meal(t_philo *self);
int			get_status(t_philo *self);
void		set_last_meal(t_philo *self, long int val);
void		set_status(t_philo *self, int val);
void		add_status(t_philo *self, int val);
//ACTIONS
int			think(t_philo *ph);
int			eat(t_philo *ph);
int			philo_sleep(t_philo *ph);
//UTILS
int			sleep_ms(int mseconds);
long int	get_time(void);
int			ft_strlen(const char *s);
int			ft_isdigit(int c);
int 		is_alldigit(char *str);
int			ft_atoi(const char *str);

#endif
